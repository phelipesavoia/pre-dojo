package controllers;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

import models.Action;
import models.Round;
import models.Usuario;
import play.db.jpa.JPA;
import to.RoundTO;
import to.rounddetails.GunPreferedTO;
import to.rounddetails.RankingTO;
import to.rounddetails.RoundDetailsTO;

public class Rounds extends ProtectedController {

    public static void index() {
    	SimpleDateFormat out = new SimpleDateFormat("dd/MM/yyyy hh:m:s"); 
    	
        List<Object[]> rounds = JPA.em().createNativeQuery("select "
        		+ "r.data as dataInicial, "
        		+ "(select r1.data from Round r1 where r1.identifier = r.identifier AND r1.status = 0) as datafinal , "
        		+ "r.identifier as identifier "
        		+ "from Round r "
        		+ "group by r.identifier").getResultList();
        
        List<RoundTO> entities = new ArrayList<RoundTO>();
        
        for (Object[] objects : rounds) {
        	entities.add(new RoundTO(Long.parseLong(objects[2].toString()), out.format((Date)objects[0]), out.format((Date)objects[1]),(Date)objects[1],(Date)objects[0]));
        }
        
        render(entities);
    }

    public static void show(java.lang.Long id) {
    	SimpleDateFormat out = new SimpleDateFormat("dd/MM/yyyy h:m:s");
    	SimpleDateFormat out2 = new SimpleDateFormat("yyyy-MM-dd hh:m:s");
    	out2.setTimeZone(TimeZone.getTimeZone("GMT"));
    	
        List<Object[]> rounds = JPA.em().createNativeQuery(" select "
        		+ " r.data as dataInicial, "
        		+ " (select r1.data from Round r1 where r1.identifier = r.identifier AND r1.status = 0) as datafinal , "
        		+ " r.identifier as identifier "
        		+ " from Round r Where r.identifier = :identifier "
        		+ " group by r.identifier").setParameter("identifier", id).getResultList();
        
        List<RoundTO> entities = new ArrayList<RoundTO>();
        
        for (Object[] objects : rounds) {
        	entities.add(new RoundTO(Long.parseLong(objects[2].toString()), out.format((Date)objects[0]), out.format((Date)objects[1]),(Date)objects[1],(Date)objects[0]));
        }
    	
        RoundTO round = entities.get(0);
        
        List<Object[]> rankings = JPA.em().createNativeQuery(""+
        		 " select " +
					" (select count(a1.action) "+
					" from TestePratico.action a1 where a1.userAction = a.userAction "+
					" AND data BETWEEN :datainicial AND :datafinal) as qtdAssasins, "+
					" a.userAction as user, "+
					" (select count(a1.action) "+
					" from TestePratico.action a1 where a1.userReceptedAction = a.userAction "+ 
					" AND data BETWEEN :datainicial AND :datafinal) as qtdDies "+
				" from "+ 
					" TestePratico.action a "+
				" where data BETWEEN :datainicial AND :datafinal "+
				" group by "+ 
					" a.userAction "+
				" UNION ( "+ 
					" select "+
						" (select count(a1.action) "+
						" from TestePratico.action a1 where a1.userAction = a.userReceptedAction "+ 
						" AND data BETWEEN :datainicial AND :datafinal) as qtdAssasins, "+
						" a.userReceptedAction as user, "+
						" (select count(a1.action) "+
						" from TestePratico.action a1 where a1.userReceptedAction = a.userReceptedAction "+ 
						" AND data BETWEEN :datainicial AND :datafinal) as qtdDies "+ 
					" from "+
						" TestePratico.action a "+
				    " where data BETWEEN :datainicial AND :datafinal "+
				    " group by "+
				    " a.userReceptedAction Order by qtdAssasins DESC) "+
        			" Order by qtdAssasins DESC").setParameter("datainicial", out2.format(round.dataInicialDate)).setParameter("datafinal", out2.format(round.dataFinalDate)).getResultList();
        
        List<RankingTO> rankingList = new ArrayList<RankingTO>();
        
        for (Object[] objects : rankings) {
        	RankingTO rank = new RankingTO();
        	rank.user = (String) objects[1];
        	rank.quantityDie = (int) objects[2];
        	rank.quantityKill = (int) objects[0];
        	rankingList.add(rank);
        }
        
        List<Object[]> gun = JPA.em().createNativeQuery(""
        		+ "select "
        			+ "count(a.gun) as gun,"
        			+ "a.userAction as user "
        		+ "from "
        			+ "TestePratico.action a "
        		+ "where "
        			+ "a.userAction <> '<WORLD>' and "
        			+ "data BETWEEN :datainicial AND :datafinal "
        		+ "group by "
        			+ "a.userAction "
        		+ "order by gun DESC LIMIT 1").setParameter("datainicial", out2.format(round.dataInicialDate)).setParameter("datafinal", out2.format(round.dataFinalDate)).getResultList();
        
        GunPreferedTO gunPreferedTO = new GunPreferedTO();
        
        for (Object[] objects : gun) {
        	gunPreferedTO.user = (String) objects[1];
        	gunPreferedTO.gun = (String) objects[0];
        }
        
        RoundDetailsTO details = new RoundDetailsTO();
        details.round = round;
        details.rankings = rankingList;
        details.gun = gunPreferedTO;
        
        render(details);
    }
}
